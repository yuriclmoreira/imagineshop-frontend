import { useContext, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { faX } from '@fortawesome/free-solid-svg-icons';
import { ShoppingCartContext } from "@/contexts/ShoppingCartContext";
import { IProduct } from "@/types";
import Image from "next/image";
import { Button, ButtonContainer, DeleteIcon, InputGroup, LoginTitle, Main, PaymentShipping, PaymentTitle, PaymentTotal, PaymentValue, Product, ProductName, ProductPrice, Separator, ShoppingCartContainer, ShoppingCartPayment, SubTitle, Title } from "./styles";


export default function ShoppingCart() {
    const {
        getProducts,
        deleteProduct,
        getTotalProducts,
        getTotalValue,
        getShippingValue,
        clearAll
    } = useContext(ShoppingCartContext);
    const [products, setProduts] = useState<IProduct[]>([]);
    const [refresh, setRefresh] = useState<number>(0);
    const [email, setEmail] = useState<string>('');
    const [password, setPassword] = useState<string>('');
    const router = useRouter();

    useEffect(() => {
        const values = getProducts();
        setProduts(values)
    }, [refresh])

    const handleDeleteProduct = (id: string) => {
        toast.error("Produto removido do carrinho", {
            position: "bottom-right",
            autoClose: 3000
        });
        deleteProduct(id);
        setRefresh(oldValue => oldValue + 1)
    }

    const handleSubmit = async (event: any) => {
        event.preventDefault();
        const api = 'http://localhost:8080';
        const token = await getTokenLogin(api, email, password);
        if (!token) {
            toast.error("Login inválido", {
                position: "bottom-right",
                autoClose: 3000
            });
            return;
        }
        const productIds: string[] = [];
        products.map(product => productIds.push(product._id));
        const sell = await sellProducts(api, token, productIds);
        if (!sell) {
            toast.error("Compra inválida", {
                position: "bottom-right",
                autoClose: 3000
            });
            return;
        }

        clearAll();
        router.push('/success')
    }

    const getTokenLogin = async (api: string, email: string, password: string): Promise<string | null> => {

        const result = await fetch(`${api}/login`, {
            method: 'POST',
            body: JSON.stringify({ email: email, password: password }),
            headers: { 'Content-type': 'application/json ' }
        });
        if (result.status !== 200) {
            return null;
        }
        const { token } = await result.json();
        return token;
    }

    const sellProducts = async (api: string, token: string, products: string[]): Promise<string | null> => {
        const result = await fetch(`${api}/products/sell`, {
            method: 'POST',
            body: JSON.stringify({ products }),
            headers: {
                'Content-type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        if (result.status !== 200) {
            return null;
        }
        return 'success';
    }
    return (products && products.length > 0 ? (
        <>
            <Head>
                <title>ImagineShop - Cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/logo.ico" />
            </Head>
            <Main>
                <Title>Meu carrinho</Title>
                <SubTitle>Produtos</SubTitle>
                <ShoppingCartContainer>
                    <section>
                        {
                            products && products.map(product => (
                                <div key={product._id}>
                                    <Separator />
                                    <ButtonContainer>
                                        <button onClick={() => handleDeleteProduct(product._id)}>

                                            <DeleteIcon icon={faX}></DeleteIcon>
                                        </button>
                                    </ButtonContainer>
                                    <Product>
                                        <div>
                                            <Image src={product.image} width={180} height={180} alt={product.name} />
                                        </div>
                                        <ProductName>{product.name}</ProductName>
                                        <ProductPrice>{product.formattedPrice}</ProductPrice>
                                    </Product>

                                </div>
                            ))
                        }
                    </section>
                    <section>
                        <ShoppingCartPayment>
                            <PaymentTitle>Resumo do pedido</PaymentTitle>
                            <PaymentValue><span>{products.length} Produtos</span> <span>{getTotalProducts()}</span></PaymentValue>
                            <PaymentShipping><span>Frete</span> <span>{getShippingValue()}</span></PaymentShipping>

                            <PaymentTotal><span>Total</span> <span>{getTotalValue()}</span></PaymentTotal>
                            <Separator />
                            <LoginTitle>Login</LoginTitle>
                            <InputGroup>
                                <span>E-mail:</span>
                                <input type="text" value={email || ''} onChange={(e) => setEmail(e.currentTarget.value)} />
                            </InputGroup>
                            <InputGroup>
                                <span>Senha:</span>
                                <input type="password" value={password || ''} onChange={(e) => setPassword(e.currentTarget.value)} />
                            </InputGroup>
                            <Button type="submit" onClick={handleSubmit}>
                                Continuar
                            </Button>
                        </ShoppingCartPayment>
                    </section>
                </ShoppingCartContainer>
            </Main>
            <ToastContainer />
        </>
    ) : (
        <>
            <Head>
                <title>ImagineShop - Cart</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/logo.ico" />
            </Head>
            <Main>
                Sem produto
            </Main>
        </>
    ))
}